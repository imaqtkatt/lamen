let Nat : Type =
  (Nat : Type)
  → (succ : Nat → Nat)
  → (zero : Nat)
  → Nat
in

let zero : Nat = λN. λs. λz. z in
let one  : Nat = λN. λs. λz. s z in
let two  : Nat = λN. λs. λz. s (s z) in

let Box : (t : Type) → Type =
  λt. (box : (t : Type) → Type)
  → (new : t → box t)
  → box t
in

let id : (A : Type) → A → A = λA. λx. x in

let new_box : (T : Type) → T → Box T =
  λT. λx. λBox. λnew. new x
in

let box_nat_two : Box Nat = new_box Nat two in

let Eq : (T : Type) → (A : T) → (B : T) → Type =
  λT. λA. λB. (eq : (T : Type) → (A : T) → (B : T) → Type)
  → (rfl : eq T A B)
  → eq T A B
in

let refl : (T : Type) → (A : T) → Eq T A A =
  λT. λA. λB. λrefl. refl
in

{ refl Nat zero : Eq Nat zero zero }
